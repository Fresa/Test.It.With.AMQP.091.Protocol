<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ assembly name="$(NuGetPackageRoot)\Test.It.With.Amqp.Protocol\1.0.3\lib\netstandard2.0\Test.It.With.Amqp.Protocol.dll" #>
<#@ assembly name="$(SolutionDir)\Test.It.With.Amqp.091.Protocol.Generator.Transformation\bin\Debug\net48\Test.It.With.Amqp.091.Protocol.Generator.Transformation.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Test.It.With.Amqp.Protocol" #>
<#@ import namespace="Test.It.With.Amqp.Protocol.Definitions" #>
<#@ import namespace="Test.It.With.Amqp091.Protocol.Generator.Transformation" #>
<#@ import namespace="Test.It.With.Amqp091.Protocol.Generator.Transformation.Extensions" #>
<#
    var path = Path.Combine(Host.ResolvePath(@"amqp0-9-1\amqp0-9-1.xml"));
    var definition = new XmlDocument();
    definition.Load(path);
    var protocol = new Protocol(definition);
    var typeConverter = new ProtocolDomainTypeConverter();

	void Tab(Action action) { this.Tab(action); }
    void Block(Action action) { this.Block(action); }
	void PrintOnNewRowForEach<TValue>(IEnumerable<TValue> iterator, Action<TValue> action) { this.PrintOnNewRowForEach(iterator, action); }
	void PrintOnNewRowForEachWithIndex<TValue>(IEnumerable<TValue> iterator, ActionDelegateWithIndexAndLength<TValue> action) { this.PrintOnNewRowForEach(iterator, action); }
	void _(int count = 1) { this.WriteNewLine(count); }
    
    void GenerateAssertion(Assert assert, string parameterName)
    {
        switch (assert.Check.ToLower())
        {
            case "notnull":
                #>Ensure.NotNull(<#= parameterName #>, nameof(<#= parameterName #>));<#
                return;
			case "length":
                #>Ensure.Range(<#= parameterName #>.Length <= <#= assert.Value #>, nameof(<#= parameterName #>));<#
                return;
			case "regexp":
                #>Ensure.That(Regex.IsMatch(<#= parameterName #>, "<#= assert.Value #>"), nameof(<#= parameterName #>), "Value must meet the following regex criteria: <#= assert.Value #>");<#
                return;
            case "le":
                // todo: How should we implement this?
                return;
        }

        throw new NotSupportedException($"Unknown assertion: '{assert.Check}'.");
    }

	void GenerateDocumentation(string documentation, string grammarDocumentation = null)
    {
        if (string.IsNullOrEmpty(documentation))
        {
            return;
        }

        #>/// <summary><# _();
        foreach (var documentationRow in documentation.Trim().Split('\n'))
        {
            #>/// <#= documentationRow.Trim() #><# _();
        }
		#>/// </summary><# _();
        if (grammarDocumentation != null)
        {
            #>/// <example><# _();
			foreach (var documentationRow in grammarDocumentation.TrimEnd().Split('\n'))
			{
				#>/// <#= documentationRow.TrimEnd() #><# _();
			}
			#>/// </example><# _();
        }
    }
#>
// WARNING! THIS FILE IS AUTO-GENERATED! DO NOT EDIT.

using System;
using System.Linq;
using System.Net;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using Test.It.With.Amqp.Protocol;
using Test.It.With.Amqp091.Protocol.Assertions;

namespace Test.It.With.Amqp<#= protocol.Major #><#=protocol.Minor#><#= protocol.Revision #>.Protocol<# Block(() =>
{
	var amqpClass = $"Amqp{protocol.Major}{protocol.Minor}{protocol.Revision}Protocol";
	// Protocol
	#>internal class <#= amqpClass #> : IProtocol<# Block(() =>
	{
	    #>public IVersion Version { get; } = new ProtocolVersion(); <# _(2);

		#>public IProtocolHeader GetProtocolHeader(IAmqpReader reader)<# Block(() =>
	    {
			#>var protocolHeader = new ProtocolHeader();<# _();
			#>protocolHeader.ReadFrom(reader);<# _();
			#>return protocolHeader;<#
	    }); _(2);

	    #>public IMethod GetMethod(IAmqpReader reader)<# Block(() =>
	    {
			#>var classId = reader.ReadShortUnsignedInteger();<# _(2);
			
			#>if (_methodFactory.TryGetValue(classId, out Dictionary<int, Func<IMethod>> methodRegister) == false)<# Block(() =>
			{
			    #>throw new <#= protocol.Constants.GetExceptionName(501) #>Exception($"There is no class with id {classId} defined.");<#
			}); _(2);
			
			#>var methodId = reader.ReadShortUnsignedInteger();<# _(2);

			#>if (methodRegister.TryGetValue(methodId, out Func<IMethod> factory) == false)<# Block(() =>
			{
			    #>throw new <#= protocol.Constants.GetExceptionName(501) #>Exception($"There is no method defined with id {methodId} in class with id {classId}.");<#
			}); _(2);
			
			#>var method = factory();<# _();			
			#>method.ReadFrom(reader);<# _();
			#>return method;<#
	    }); _(2);

		#>public IContentHeader GetContentHeader(IAmqpReader reader)<# Block(() =>
	    {
			#>var classId = reader.ReadShortUnsignedInteger();<# _(2);
			#>var weight = reader.ReadShortUnsignedInteger();<# _();
			#>if (weight != 0)<# Block(() =>
	        {
	            #>throw new <#= protocol.Constants.GetExceptionName(501) #>Exception("Expected weight = 0");<#
	        }); _(2);

			#>if (_contentHeaderFactory.TryGetValue(classId, out Func<IContentHeader> factory) == false)<# Block(() =>
			{
			    #>throw new <#= protocol.Constants.GetExceptionName(501) #>Exception($"There is no content header defined for class with id {classId}.");<#
			}); _(2);
			
			#>var contentHeader = factory();<# _();			
			#>contentHeader.ReadFrom(reader);<# _();
			#>return contentHeader;<#
	    }); _(2);

		#>public IContentBody GetContentBody(IAmqpReader reader)<# Block(() =>
	    {
			#>var contentBody = new ContentBody();<# _();
			#>contentBody.ReadFrom(reader);<# _();
			#>return contentBody;<#
	    }); _(2);

		#>public IHeartbeat GetHeartbeat(IAmqpReader reader)<# Block(() =>
	    {
			#>var heartbeat = new Heartbeat();<# _();
			#>heartbeat.ReadFrom(reader);<# _();
			#>return heartbeat;<#
	    }); _(2);

	    #>private readonly Dictionary<int, Dictionary<int, Func<IMethod>>> _methodFactory = new Dictionary<int, Dictionary<int, Func<IMethod>>><# Block(() =>
	    {
			PrintOnNewRowForEachWithIndex(protocol.Classes.Values, (@class, index, length) =>
			{
				#>{ <#= @class.Index #>, new Dictionary<int, Func<IMethod>> { <#
				_();
			    Tab(() =>
			    {
			        PrintOnNewRowForEachWithIndex(@class.Methods.Values, (method, methodIndex, methodCount) =>
			        {
						#>{ <#= method.Index #>, () => new <#= @class.Name.ToPascalCase('-') #>.<#= method.Name.ToPascalCase('-') #>() }<#

						if (methodIndex + 1 != methodCount) {#>,<#}
			        });
			    });
				#>}}<# if (index + 1 != length) {#>,<#}
			});
	    });
		#>;<# _(2);

		#>private readonly Dictionary<int, Func<IContentHeader>> _contentHeaderFactory = new Dictionary<int, Func<IContentHeader>><# Block(() =>
	    {
	        var classesWithContentHeader = protocol.Classes.Values.Where(@class => @class.Fields.Any());
			PrintOnNewRowForEachWithIndex(classesWithContentHeader, (@class, index, length) =>
			{
				#>{ <#= @class.Index #>, () => new <#= @class.Name.ToPascalCase('-') #>.ContentHeader() }<# if (index + 1 != length) {#>,<#}
			});
	    });
		#>;<# _(2);

		#>private class ProtocolVersion : IVersion<# Block(() =>
	    {
	        #>public int Major { get; } = <#= protocol.Major #>;<# _();
	        #>public int Minor { get; } = <#= protocol.Minor #>;<# _();
	        #>public int Revision { get; } = <#= protocol.Revision #>;<# _(2);

			#>public void ReadFrom(IAmqpReader reader)<# Block(() =>
			{
			}); _(2);

			#>public void WriteTo(IAmqpWriter writer)<# Block(() =>
			{
	        });
	    });
	}); _(2);
	
	// Constants
    #>internal class Constants<# Block(() =>
    {
        PrintOnNewRowForEachWithIndex(protocol.Constants.Values, (constant, index, count) =>
        {
            GenerateDocumentation(constant.Documentation);
            #>internal const int <#= constant.Name.ToPascalCase('-') #> = <#= constant.Value #>;<# if (index + 1 != count) _();
        });
    }); _(2);

	#>public abstract class AmqpException : Exception <# Block(() =>
    {
        #>protected AmqpException()<# Block(() =>
        {
        }); _(2);

		#>protected AmqpException(string message) : base(message)<# Block(() =>
        {
        }); _(2);

		#>public abstract int Code { get; }<# 
    }); _(2);

	// Base Exceptions
    PrintOnNewRowForEachWithIndex(protocol.Constants.Values.Where(constant => string.IsNullOrEmpty(constant.Class) == false).Select(constant => constant.Class.ToPascalCase('-')).Distinct(), (exceptionName, index, count) =>
    {
        #>public abstract class <#= exceptionName #>Exception : AmqpException <# Block(() =>
        {
			#>protected <#= exceptionName #>Exception()<# Block(() =>
			{
			}); _(2);

            #>protected <#= exceptionName #>Exception(string message) : base(message)<# Block(() =>
			{
			}); 
        }); if (index + 1 != count) _();
    }); _(2);

	// Exceptions
    PrintOnNewRowForEachWithIndex(protocol.Constants.Values.Where(pair => string.IsNullOrEmpty(pair.Class) == false), (constant, index, count) =>
    {
        var exceptionName = constant.Name.ToPascalCase('-');
        #>public class <#= exceptionName #>Exception : <#= constant.Class.ToPascalCase('-')#>Exception<# Block(() =>
        {
			#>public <#= exceptionName #>Exception()<# Block(() =>
			{
			}); _(2);

            #>public <#= exceptionName #>Exception(string message) : base(message)<# Block(() =>
			{
			}); _(2);

			#>public override int Code { get; } = <#= constant.Value #>;<# 
        });

		if (index + 1 != count) _();
    }); _(2);

    // Domain types
    PrintOnNewRowForEach(protocol.Domains.Values, domain =>
    {
        var className = domain.Name.ToPascalCase('-');
		var nativeType = typeConverter.Convert(domain.Type);
        var type = nativeType.GetPrettyFullName();
		var isNullable = nativeType.IsNullable();

        GenerateDocumentation(domain.Documentation);
        #>public struct <#= className #> <# Block(() =>
        {
            #>public <#= type #> Value { get; }<# _(2);

            #>public <#= className #>(<#= type #> value)<# Block(() =>
            {
                PrintOnNewRowForEach(domain.Asserts, assert => { GenerateAssertion(assert, "value"); }); if (domain.Asserts.Any()) _();
                #>Value = value;<#
            }); _(2);

			#>public override bool Equals(object obj) <# Block(() =>
            {
                #>return obj is <#= className #> comparing<#= className #> && this == comparing<#= className #>;<#
            }); _(2);

			#>public override int GetHashCode() <# Block(() => 
			{
				if (isNullable)
				{
					#>return Value?.GetHashCode() ?? 0;<#
				}
				else
				{
					#>return Value.GetHashCode();<#
				}
			}); _(2);

			#>public override string ToString() <# Block(() => 
			{
				if (isNullable)
				{
					#>return Value?.ToString() ?? String.Empty;<#
				}
				else
				{
					#>return Value.ToString();<#
				}			
			}); _(2);

			#>public static bool operator == (<#= className #> x, <#= className #> y)<# Block(() => 
			{
				#>return x.Value == y.Value;<#
			}); _(2);

			#>public static bool operator != (<#= className #> x, <#= className #> y)<# Block(() =>
            {
                #>return !(x == y);<#
            }); _(2);

			#>public static <#= className #> From(<#= type #> value)<# Block(() =>
            {
                #>return new <#= className #>(value);<#
            });
        }); _();
    });
    
    // Classes
    PrintOnNewRowForEach(protocol.Classes.Values, @class =>
    {
        var className = @class.Name.ToPascalCase('-'); _();
		GenerateDocumentation(@class.Documentation, @class.GrammarDocumentation);
		#>public class <#= className #><# Block(() => 
		{
		    const string contentHeaderName = "ContentHeader";

			// Content Header
		    if (@class.Fields.Any())
		    {
		        #>public class <#= contentHeaderName #> : IContentHeader<# Block(() =>
				{
					#>public int ClassId { get; } = <#= @class.Index #>;<# _(2);
					
					#>public long BodySize { get; set; }<# _(2);

					#>public bool SentOnValidChannel(int channel)<# Block(() =>
				    {
				        #>return channel > 0;<#
				    }); _(2);

					PrintOnNewRowForEach(@class.Fields.Values, field =>
					{
						GenerateDocumentation(field.Documentation);
						#>public bool Has<#= field.Name.ToPascalCase('-') #> { get; private set; }<# _();

						#>private <#= field.Domain.Name.ToPascalCase('-') #> _<#= field.Name.ToCamelCase('-') #>;<# _();
						#>public <#= field.Domain.Name.ToPascalCase('-') #> <#= field.Name.ToPascalCase('-') #><# Block(() =>
						{
							#>get => _<#= field.Name.ToCamelCase('-') #>;<# _();
							#>set<# Block(() =>
							{
								if (field.Asserts.Any())
								{
									PrintOnNewRowForEach(field.Asserts, fieldAssert =>
									{
										GenerateAssertion(fieldAssert, "value.Value");
									}); _();
								}
								#>Has<#= field.Name.ToPascalCase('-') #> = value != default;<# _();
								#>_<#= field.Name.ToCamelCase('-') #> = value;<#
							});
						}); _();
					});
					if (@class.Fields.Values.Any()) {_();}

					#>public void ReadFrom(IAmqpReader reader)<# Block(() =>
					{
						#>BodySize = reader.ReadLongLongInteger();<# _();

						#>var propertyFlags = reader.ReadPropertyFlags(); <# _();
						#>if (propertyFlags.Length < <#= @class.Fields.Values.Count() #>)<# Block(() =>
					    {
					        #>throw new ProtocolViolationException("There are more fields than property flags.");<# 
					    }); _(2);

					    PrintOnNewRowForEachWithIndex(@class.Fields.Values, (field, index, length) =>
						{
							#>Has<#= field.Name.ToPascalCase('-') #> = propertyFlags[<#= index #>];<# _();
							#>if (Has<#= field.Name.ToPascalCase('-') #>)<# Block(() =>
						    {
								#>_<#= field.Name.ToCamelCase('-') #> = new <#= field.Domain.Name.ToPascalCase('-') #>(reader.<#= typeConverter.GetReaderMethod(field.Domain.Type) #>());<#						        
						    });
						    if (index + 1 != length) _();
						});
					}); _(2);

					#>public void WriteTo(IAmqpWriter writer)<#
					Block(() =>
					{
						#>writer.WriteShortUnsignedInteger((ushort)ClassId);<# _();
						#>writer.WriteShortUnsignedInteger(0);<# _();
						#>writer.WriteLongLongInteger(BodySize);<# _(2);
					    
						#>var propertyFlags = new [] <# Block(() =>
					    {
							PrintOnNewRowForEachWithIndex(@class.Fields.Values, (field, index, length) =>
							{
								#>Has<#= field.Name.ToPascalCase('-') #><# if (index + 1 != length) { #>,<# }
							});
					    });
						#>;<# _(2);

						#>writer.WritePropertyFlags(propertyFlags);<# _(2);

					    PrintOnNewRowForEachWithIndex(@class.Fields.Values, (field, index, length) =>
						{
							#>if (Has<#= field.Name.ToPascalCase('-') #>)<# Block(() =>
						    {
								#>writer.<#= typeConverter.GetWriterMethod(field.Domain.Type) #>(_<#= field.Name.ToCamelCase('-') #>.Value);<#						        
						    }); if (index + 1 != length) _();
						});
					}); 
				}); _(2);
			}

			// Methods
			PrintOnNewRowForEachWithIndex(@class.Methods.Values, (method, index, length) =>
			{
				var methodName = method.Name.ToPascalCase('-');

				GenerateDocumentation(method.Documentation);
				#>public class <#= methodName #> : IMethod<# if (method.HasContent) { #>, IContentMethod<<#= className + "." + contentHeaderName #>><# } else { #>, INonContentMethod<# } foreach (var responseMethod in method.Responses.Values) { #>, IRespond<<#= responseMethod.Method.Name.ToPascalCase('-') #>><# } if (method.Chassis.Any(chassis => chassis.Name == ChassisName.Client)) { #>, IServerMethod<# } if (method.Chassis.Any(chassis => chassis.Name == ChassisName.Server)) { #>, IClientMethod<# } Block(() =>
				{
					#>public int ProtocolClassId => <#= @class.Index #>;<# _();
					#>public int ProtocolMethodId => <#= method.Index #>;<# _(2);
					
					#>public bool SentOnValidChannel(int channel)<# Block(() =>
				    {
				        if (className == "Connection") { #>return channel == 0;<# }
				        else {#>return channel > 0;<# }
				    }); _(2);

					if (method.HasContent)
					{
						#>public <#= className + "." + contentHeaderName #> ContentHeader { get; set; }<# _(2);

						#>public IContentMethod SetContentHeader(IContentHeader contentHeader)<# Block(() =>
						{
							#>if (typeof(<#= className + "." + contentHeaderName #>) != contentHeader.GetType())<# Block(() =>
						    {
						        #>throw new UnexpectedFrameException($"Did not expect {contentHeader.GetType()}, expected {typeof(<#= className + "." + contentHeaderName #>)}.");<#
						    }); _();

							#>ContentHeader = (<#= className + "." + contentHeaderName #>) contentHeader;<# _();
							#>return this;<#
						}); _(2);

						#>public byte[] ContentBody => _contentBodyFragments.SelectMany(fragment => fragment.Payload).ToArray();<# _(2);

						#>public IContentBody[] ContentBodyFragments => _contentBodyFragments.ToArray();<# _(2);
						
						#>private readonly List<IContentBody> _contentBodyFragments = new List<IContentBody>();<# _();
						#>public IContentMethod AddContentBody(IContentBody contentBody)<# Block(() => {
						{
						    #>_contentBodyFragments.Add(contentBody);<# _();
							#>return this;<#
						}}); _(2);

						#>public <#= methodName #> AddContentBodyFragments(params IContentBody[] contentBodyFragments)<# Block(() => {
						{
							#>foreach (var contentBodyFragment in contentBodyFragments)<# Block(() =>
						    {
						        #>AddContentBody(contentBodyFragment);<#
						    }); _();
						    #>return this;<#
						}}); _(2);
					}

					PrintOnNewRowForEachWithIndex(method.Responses.Values, (response, responseIndex, responseLength) =>
					{
						var methodType = response.Method.Name.ToPascalCase('-');
				        #>public <#= methodType #> Respond(<#= methodType #> method) <# Block(() =>
					    {
					     #>return method;<#
					    }); _(2);
					});

					#>public Type[] Responses() <# Block(() =>
				    {
				       #>return new Type[] { <#= string.Join(", ", method.Responses.Values.Select(response => $"typeof({response.Method.Name.ToPascalCase('-')})" )) #> };<#
				    }); _(2);

					PrintOnNewRowForEach(method.Fields.Values, field =>
					{
						#>private <#= field.Domain.Name.ToPascalCase('-') #> _<#= field.Name.ToCamelCase('-') #>;<# _();
						GenerateDocumentation(field.Documentation);
						#>public <#= field.Domain.Name.ToPascalCase('-') #> <#= field.Name.ToPascalCase('-') #><# Block(() =>
						{
							#>get => _<#= field.Name.ToCamelCase('-') #>;<# _();
							#>set<# Block(() =>
							{
								if (field.Asserts.Any())
								{
									PrintOnNewRowForEach(field.Asserts, fieldAssert =>
									{
										GenerateAssertion(fieldAssert, "value.Value");
									}); _();
								}
								#>_<#= field.Name.ToCamelCase('-') #> = value;<#
							});
						}); _();
					});
					if (method.Fields.Values.Any()) {_();}

					#>public void ReadFrom(IAmqpReader reader)<# Block(() =>
					{
						PrintOnNewRowForEach(method.Fields.Values, field =>
						{
							#>_<#= field.Name.ToCamelCase('-') #> = new <#= field.Domain.Name.ToPascalCase('-') #>(reader.<#= typeConverter.GetReaderMethod(field.Domain.Type) #>());<#
						});
					}); _(2);

					#>public void WriteTo(IAmqpWriter writer)<#
					Block(() =>
					{
						#>writer.WriteShortUnsignedInteger((ushort)ProtocolClassId);<# _();
						#>writer.WriteShortUnsignedInteger((ushort)ProtocolMethodId);<# if (method.Fields.Values.Any()) { _(2); } 

						PrintOnNewRowForEach(method.Fields.Values, field =>
						{
							#>writer.<#= typeConverter.GetWriterMethod(field.Domain.Type) #>(_<#= field.Name.ToCamelCase('-') #>.Value);<#
						});
					}); 
				});

			    if (index + 1 != length) _();
			});
		}); 
    }); _(2);

	// Protocol Header
	#>public class ProtocolHeader : IProtocolHeader, IRespond<Connection.Start><# Block(() => 
	{
		#>public string Protocol { get; set; }<# _();
		#>private const string ValidProtocol = "AMQP";<# _(2);
		#>public IVersion Version { get; set; } <# _();
		#>private readonly IVersion _validVersion = new <#= amqpClass #>().Version;<# _(2);
		#>public int Constant { get; set; }<# _();
		#>private const int ValidConstant = 0;<# _(2);
		
		#>public void WriteTo(IAmqpWriter writer)<# Block(() => 
		{
			#>writer.WriteBytes(Encoding.UTF8.GetBytes(Protocol));<# _();
			#>writer.WriteByte((byte)Constant);<# _();
			#>Version.WriteTo(writer);<#
		}); _(2);

		#>public void ReadFrom(IAmqpReader reader)<# Block(() => 
		{
			#>Protocol = Encoding.UTF8.GetString(reader.ReadBytes(4));<# _();
			#>Constant = reader.ReadByte();<# _();
			#>Version = new ProtocolHeaderVersion();<# _();
			#>Version.ReadFrom(reader);<#
		}); _(2);

		#>public bool IsValid => ValidProtocol == Protocol && ValidConstant == Constant && _validVersion.Major == Version?.Major && _validVersion.Minor == Version?.Minor && _validVersion.Revision == Version?.Revision;<# _(2);

		#>public Connection.Start Respond(Connection.Start method)<# Block(() => 
		{
			#>return method;<#
		}); _(2);

		#>public ProtocolHeader Respond(ProtocolHeader protocolHeader)<# Block(() => 
		{
			#>return protocolHeader;<#
		}); _(2);

		#>private class ProtocolHeaderVersion : IVersion<# Block(() => 
		{
			#>public int Major { get; private set; }<# _();
			#>public int Minor { get; private set; }<# _();
			#>public int Revision { get; private set; }<# _(2);

			#>public void WriteTo(IAmqpWriter writer)<# Block(() => 
			{
				#>writer.WriteByte((byte)Major);<# _();
				#>writer.WriteByte((byte)Minor);<# _();
				#>writer.WriteByte((byte)Revision);<#
			}); _(2);
		    
			#>public void ReadFrom(IAmqpReader reader)<# Block(() => 
			{
				#>Major = reader.ReadByte();<# _();
				#>Minor = reader.ReadByte();<# _();
				#>Revision = reader.ReadByte();<#
			});
		});
	}); _(2);

	

    // Content Body
	#>public class ContentBody : IContentBody<# Block(() =>
    {
		#>public byte[] Payload { get; set; }<# _(2);

        #>public bool SentOnValidChannel(int channel)<# Block(() =>
		{
			#>return channel > 0;<#
		}); _(2);
					
		#>public void ReadFrom(IAmqpReader reader)<# Block(() =>
        {
            #>Payload = reader.ReadBytes(reader.Length);<#
        }); _(2);

        #>public void WriteTo(IAmqpWriter writer)<# Block(() =>
        {
            #>writer.WriteBytes(Payload);<# _();
        });
    }); _(2);

	// Heartbeat
	#>public class Heartbeat : IHeartbeat<# Block(() =>
    {
        #>public bool SentOnValidChannel(int channel)<# Block(() =>
		{
			#>return channel == 0;<#
		}); _(2);
					
		#>public void ReadFrom(IAmqpReader reader)<# Block(() =>
        {
        }); _(2);

        #>public void WriteTo(IAmqpWriter writer)<# Block(() =>
        {
        });
    });
});
#>